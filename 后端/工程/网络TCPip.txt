	网络编程：就是基于网络协议的编程，协议就是规则

win32函数原型 开头是 lp 的就是要的是一个地址

自己把程序关闭了 点 X 了 写上就会被系统调用这个函数：
	SetConsoleCtrlHandler(fun , TRUE )    
		参1：要调用的函数
		参2： TRUE 是先执行完系统默认的 然后在执行 fun函数， FALSE 是只执行 系统默认的
		BOOL WINAPI fun(DWORD dwCtrlType ){  dwCtrlType这个值可以传递不同的值 来进行操作，去查吧    }

tcp/ip 协议： 
	1）重要性：是互联网的基石，没有这个就上不了网
	2）概念：tcp/ip协议族（组，簇，体系）别称，不是tcp和IP的总称是 指整个网络协议，他俩就是单独的两个 协议
	3）特点：面向链接的、可靠的、基于字节流的传输层协议  udp/ip是 非面向链接的、不可靠的、基于数据报的传输层协议 

		client/sercer ------客户端/服务器端  是c/s模型  浏览器/服务器 是b/s
		
	socket编程和套接字编程 是一个，也称 网络编程

		创建服务端：1、打开网络库 2、校验版本 3、创建SOCKET 4、绑定地址与端口 5、开始监听 6、创建客户端socket/接收链接 7、与客户端收发信息
		创建客户端：1、打开网络库 2、校验版本 3、创建SOCKET 4、链接到服务器    5、与服务器收发信息

	头文件： #include<winsock2.h>   在MSDN 查 ws_32，也可以直接搜头文件
		#pragma comment(lib,"ws2_32.lib")
		
		
	 	1）打开网络库： int WSAStartup(banben，&a) 打开/启动网络库。成功返回0  失败返回错误码（可以定义一个整形变量接收然后查看）
				异步和同步：同步：卡死/阻塞。异步：多个工作同时进行
			参1： WORD 类型的banben  是需要的版本，就是要调用的最高版本 
				WORD是一个版本号 是 usigned short 的别名  要怎么往 banben 里面 传呢 用系统定义好的宏 MAKEWORD(2,2)  
			参2： 是一个 WSADATA  的结构体指针，先定义 WSADATA 变量名a 

		2）校验版本：HIBYTE(a.wVersion)这个是高位  LOBYTE(a.wVersion)这个是地位，
			实例 if(2!=HIBYTE(a.wVersion) || 2！= LOBYTE(a.wVersion)) { 说明版本不对 因为是2.2 所以！=2 高位是.2 地位是2。关闭网络库 }
		
		3）关闭网络库： WSACleanup() 也可以说是清理网络库


	socket 介绍：
		将底层复杂的协议体系，执行流程，进行了封装，封装完的结构就是它，socket是调用协议进行通信的 操作接口	
		意义：将复杂的协议过程 和我们分开，直接操作一个简单的socket就行了，对于底层的协议 过程啥的不用知道，就知道怎么使用就行		
		本质：SOCKET是一个数据类型，转定义一看就是一个无符号整形，是唯一的 跟id一样
		应用：网络通讯函数 都要使用SOCKET 变量c，需要用它做参数，每一个客户端有一个，服务器也有一个，通信的时候 就需要这么SOCKET 做参数，给谁通信就传递谁的SOCKET


		1）创建 SOCKET
			SOCKET 变量c=socket(int af , int type , int protocol) socket成功 变量c用的值，失败返回错误码，下面函数获取结果
					可以用 if(变量c==INVALID_SOCKET){int a=WSAGetLastError()}
						找最近的socket函数， 函数来获取错误吗，就可以在工具查看了（也可以百度），执行成功也可以用这个获取，返回0。
	
				参1：地址的类型	AF_INET  ip地址（v4，4字节32位地址）AF_INERT6  ip地址(v6 16字节 128位地址） AF_BTH 蓝牙地址  AF_IRDA 红外数据协议地址。还有好多用到了查
					这几个宏 别名有数字的哦 第1：2，第2：23，第3:32，第4：26 可以数字穿进去，因为函数原型是整数  

				参2：套接字的类型(就是数据的传递方式)	SOCK_STREAM 顺序可靠   SOCK_DGRAM  固定 无连接 不可靠  SOCK_RAW  SOCK_RDM  SOCK_SEOPACKET 待补充
					这几个宏 别名有数字的哦 第1：1，第2：2 3:3,4:4,5:5 因为也是整形

				参3：协议的类型	IPPROTO_TCP  tcp协议  IPPROTO_UDP  udp协议  IPPROTO_ICMP  icmp协议  IPPROTO_IGMP  igmp协议  IPPROTO_RM rm协议
					想要使用一个协议，设备支持才行，比如红外， 一般填 0 系统会自动帮我们选择协议类型（系统是根据前两个该写什么，万一是前面两个一样的呢）基本使用没事
					他几个也有相应的数字哦

		记得释放 closesocket(变量c)； 然后记得 还有 关闭网络库 WSACleanup() 释放是 关闭里面的，先释放在关闭
			

		
		2）绑定地址与端口：
			int bind(SOCKET s，const sockaddr*addr, int namelen ) 给我socket绑定端口号与具体地址   成功返回0 失败返回错误码
				地址就是：找到我们的电脑（只有一个地址） 
				端口号：找到对应的软件都对应着自己的端口号（每一种通讯对应的端口号都是唯一的）（同一个软件可能占用多个端口号）
			参1：上面创建的 变量c socket
			参2：结构体指针，传结构体地址，应该是吧ip地址和端口赋值结构体穿进去
				用SOCKARRD_IN  变量a。把IP地址 端口号 地址类型 赋值进去，传参数的时候要 (const struct   sockaddr * )&变量
				实例： SOCKARRD_IN（小写加上struct） a；
					 a.sin_family= AF_INET;(地址类型) 
					a.sin_port = htons(12345) 65535以内（0~1023为系统保留占用端口号）写大一点整个两三万，被占用了 就失败了cmd netstat -ano 查看所有被使用端口
						netstat -|findstr “12345”检查是否别调用，没有就不显示。htons是吧端口号赋值进去（不用好像也行）
					a.sin_addr.S_un.S_addr = inet_addr("127.0.0.1") inet_addr是吧地址转换成无符号整形的，ip地址是10什么表示法
						127.0.0.1 是回送地址  本地回环地址 本地网络测试，在系统内部传递，用ip地址可以和同局域网的通讯
			参3：大小 参数2 的类型大小  sizeof（参数2）（a）； 
				失败if(SOCKET_ERROR==bind()){  int a=WASGetLastError();}可以获取错误（原因）， 然后记得释放socket和关闭网络库


		3）开始监听：  listen()
			int WSAAPI listen(SOCKET s, int backlog) 将套接字置于正在侦听传入连接的状态。就是调用了只后 客户端就可以通过服务器socket来链接了，前面是吧socket创建好，数据都绑定上
					成功返回0 ，失败返回错误码 SOCKET_ERROR，具体错误用WSAGetLastError()
				参1：服务器端的socket，就是socket函数创建的
				参2 ：挂起链接队列的最大长度（就是一下处理不了这么多的时候就是他 休息区）手动设置2~10~20多， 一般填写 SOMAXCONN  作用是系统选择最合适的个数
				WSAAPI 是调用约定， 我们可以忽略给系统看的
 
		
		4）创建客户端socket：  accept    注意：这个获取错误是 INVALID_SOCKET   要用一个新的SOCKET 来接收，这个是客户端的新来的socket
				有客户端信息就链接，没有客户端信息就死等（阻塞） 一次只可以处理一个请求，6个就要循环吧6次
			SOCKET WSAAPI accept(SOCKET s , sockaddr *addr , int *addrlen) 将客户端的信息绑定到一个socket上，就是给客户端创建一个socket，通过返回值返回给我们客户端的socket
				一次只可以创建一个，因为返回值只有一个，有几个客户端连接就多调用几次
				返回值：是SOCKET 变量b =accept()
				参1：上面创建的socket 变量c，先出于监听状态，然后来的连接有这个管理，取客户端的信息，就是通过这个我们自己的socket
				参2 ：客户端的地址端口信息结构体，和上面bind()第二个参数一样 那个是传递里面去使用，不可以修改加了const，这个是把函数里面的东西整到a里面
					实例：SOCKARRD_IN（小写加上struct） a；
					然后传进去也要强转 (struct sockaddr  *)&a 这个就是参数2  可以NULL
				参3：就是把参数2大小也返回给我们，用的是指针， int q=sizeof(a);    传递的时候&q

			如果不想得到客户端的信息  参数2 和参数3 就传递NULL。等到想用的时候了就用下面这个函数获取 ->附加 5）

				获取错误值：创建一个SOCKET 变量a。if(INVALID_SOCKET==a){  int a=WSAGetLastError(); 释放 关闭 ret urn 0}别忘了吧 刚创建的 变量a也给释放了在函数尾
								

	附加	5）获取已创建的客户端socket的数据：getpeername()、获取本地  getsockname()
			a）直接实例： SOCKADDR_IN a； int b=sizeof(a);  SOCKET c;  c=accept(a,NULL,NULL) 
				getpeername(c,(struct sockaddr *)&a ,&b )
			这样就获取成功了，这个要在创建客户端后才可以用，下面过去本地的
			
			b） SOCKADDR_IN a； int b=sizeof(a);  SOCKET c;  getsockname(c，(struct sockaddr *)&a，&b)
				c是客户端的 也是获取本地的，只可以获取本地


		6）与客户端收发消息： 注意参数1 的参数
			a）收： int recv(SOCKET s , char *buf , int len , int flags) 从发收到消息。		     
				参1：目标的socket，接收目标的信息，指定的客户端1对1，这个是accept 返回的socket 接收的值，不是刚开始就创建的 变量c，客户端是的（因为没有accept）
				参2： 定义一个数组来装接收到的消息，char类型的 是按字节发来的，客户端消息的存储空间，就是个字符数组 一般是1500内吧（因为网络最大传输单元是1500，一次发1500）
				参3： 长度 就是参2数组的长度
				参4：接收的方式   一般填 0 还有别的宏，但是没有这个好 功能全MSG_WAITALL满足参数3的长度才开始读取，别的就不写了，感觉用不到

			返回值：成功：读出来的字节的大小，客户端下线返回0，没有发数据就一直阻塞（死等),失败返回错误码SOCKET_ERROR函数判断 WSAGetLastError() 为什么错，有的要 重启、等待、不用管
			作用：得到指定客户端（参数1）发来的消息
			原理：复制，就是通过socket找到缓冲区，把数据复制到参数2
	

			b）发：int WSAAPI send(SOCKET s , const char* buf, int len, int flags)把消息发过去，成功返回0 失败返回SOCKET_ERROR 用WSAGetLastError有的要 重启、等待、不用管
				参1：目标的socket，给指定的目标发信息，这个是accept 返回的socket 接收的值，不是刚开始就创建的 变量c，客户端是的（因为没有accept）
				参2：给对方发送的字节串 不要超过1500字节哦 有包头（包装啥的）就写1400好了
				参3：要发送字节的个数
				参4：发送的方式  一般填 0

				作用：向目标发送数据
				原理：将数据复制黏贴到 系统的协议缓冲区中 等计算机伺机发出去（时间很快毫秒），最大传输单元是1500字节


		7）链接到服务器：
			int WSAAPI connect(SOCKET s ,const sockaddr *name , int namelen)链接服务器并把服务器信息与服务器socket绑定到一起
				参1：服务器的 socket
				参2：服务器 ip地址端口结构体  也是绑定端口那个参数2,里面的参数是和服务器的一模一样的
					实例： SOCKET_IN liu;   liu.sin_family=AF_INET; liu.sin_port = htons(12345); liu.sin_addr.S_un.S_addr = inet_addr("127.0.0.1")这都是要和服务器的一样的
						传参 记得强转  (struct sockaddr *)&liu
				参3：结构体大小 sizeof(liu);  
			返回值：成功返回0 失败返回SOCKET_ERROR  然后用WSAGetLastRrror 来获取



select 模型：
		特点：解决 基本c/s模型中 accept rcev 傻等的问题（就是阻塞）  不可以解决执行阻塞（就是这个函数没有执行完就不可以干别的）会有别的模型解决他们的

		创建服务端：1、打开网络库 2、校验版本 3、创建SOCKET 4、绑定地址与端口 5、开始监听 6、select（替代了accept和收发函数）

		作用: 监视socket 集合 第1步创建的，如果某个socket发生事件（链接或收发数据），通过返回值及参数告诉我们		
	
	1）第一步：定义一个装客户端的socket结构体： fd_set 变量a 可以转定义看一下参数  结构体数组里面有个宏 PDSETSIZE 是64 想更大 就在 头文件 <Winsock2>定义一下#define 宏 128变大影响效率差不多就行
		对应了4个宏操作： a)  FD_ZERO 是清0的 		使用：FD_ZERO(&a) 就把a清0了  
				b) FD_SET  添加一个元素  		使用：FD_SET(socket s , &a )
				c) FD_CLR   删除指定元素		使用：FD_CLR(socket  s  ,&a)   在集合中删除了  但是没有释放，自己手动释放 不然内存泄露
				d）FD_ISSET 判断socket是在里面	使用：FD_ISSET(socket s, &a)  如果在里面就返回一个 非0，不在就返回0 
	2） int WSAAPI select( int nfds , fd_set *readfds, fd_set *witefds, fd_set *exceptfds , const timeval *timeout) 
		参1 ： 填0 仅仅是为了兼容
		参2：检查是否有可读的socket，检查是否有消息 recv和 accept。 （初始化所有的socket 通过select投放给系统，系统将有事件发生的socket在赋值回来，调用和这个参数就只剩下有请求的socket）
		参3：检查是否有可写的socket ，这个就是检查 send函数了，应用的不是很多，因为只要服务器连上想什么时候都行。可以不用填NULL（）上面括号里复制到这，不用记2次了
		参4：检查 套接字上的异常错误，上上面括号里复制到这，不用记2次了。得到异常套接字上的具体错误码，用函数 getsockopt(socket ，SOL_SOCKET，SO_ERROR, buf ，buflen)
		参5：最大等待时间  NULL没有事就在那里等 有东西来了 就继续向下执行 ，设置时间 就等多久，有了立刻执行，没有等时间到了 也往下执行。
			一个是秒一个是微秒（=1000毫秒 ）0  0非阻塞，直接返回，3 4  等3秒4微秒返回   NULL 傻等 等有东西来，不然没消息回来也不知道干啥呀
		返回值：0 客户端在等待事件没有反应 处理：continue 就行，等待下一次等待
			>0 游客户端请求了
			SOCKET_ERROR 发生错误了，就用 WSAGetLastError()得到错误码

	实例： fd_set a； FD_ZERO(&a) 清零； FD_SET(socket , &a)服务器装进去（有别的就也装别的） while(1){   fd_set b=a; 找个临时工    struct timeval st;参数5等时间  st.tv_sec=3；st.tv_usec =0;
		int liu= select(0, &b,&o,&q, &st);     if(0==liu){ continue;} else if(liu>0) { 有响应 参2是1.有响应,参数3+上2.有响应,参4也是+3.} else{ 发生错误了写下面}     }

			1.有响应：for(int i; i<b.fd_count;i++){ if(b.fd_array[i]==blsocket)判断是不是服务器的响应{SOCKET 临时c=accept(blsocket,NULL,NULL)实例就先空；if(c==INVALID_SOCKET){continue;} 
				 FD_SET(c,&a);把刚来的客户端装进去 }if结束 ，下面是else{那个是判定是否服务器响应，如果不是服务器就是客户端的响应 ,客户端就是revc了}
				else{ char buf[1500]={0};  int t=recv(b.fd_array[i],buf,1500,0);if(t==0){客户端下线下面(1) }else if(t>0){接收到消息了打印一下} else{错误信息处理上面recv函数部分有 }  }	  }

		(1）客户端下线（自动关闭（执行到WSACleanup）手动是10054错误码）  就要从 集合fd_set a中拿掉，先SOCKET q临时工=b.fd_array[i]； FD_CLR(b.fd_array[i],&a)。  释放客户端closesocket(q)
				要先用临时代替，再删除，在释放，不然没有临时工，他已经删除了b.fd_array[i]已经指向下一个了，在释放就错了

			2.有响应：定义一个 fd_set o=a临时工    for(int i;o.fd_count；i++ ) {int e= sand(o.fd_array[i], "abc",strlen("abc"),0)if(SOCKET_ERROR==e{错误码处理 成功返回0失败就是错误码} ) }

			
			3. 有响应：定义一个 fd_set q=a 临时工 for(int i;q.fd_count；i++ ){ 用getsockopt(q.fd_array[i] , SOL_SOCKET , SO_ERROR, buf , &size)  printf("%s",buf); }
				getsockopt成功返回0失败返回SOCKET_ERROR(失败了就无法得到错误信息)可以用它得到为什么得到失败吗错误
				参1 是错误的socket
				参2 是SOL_SOCKET
				参3 是 错误类型
				参4 是 错误类型装参4里  char buf[100]={0};
				参5 参数4 数组的大小  int size=99;


	总结：基本上只有参数2 参3、4都是NULL。参数2是核心




Windows处理用户行为的两种方式： 1）消息机制：核心 消息队列、2）事件机制：核心 事件集合

事件选择的逻辑： 整体逻辑跟select差不多，名字上一看就是进化版：WSAEventSelect
			第1步：创建一个事件对象（变量） WSACreateEvent 函数返回值就是对象 。要给每一个socket都绑定上一个事件对象，
			第2步：为每一个事件对象绑定上socket 和它的操作 accept recv send read closesocket  并投递个系统，然后就不用 管了 是系统自己监管
			第3步：查看事件是否有信号，用 WSAWaitForMultipleEvents()  来得到结果
			第4步：有信号就分类处理      WSAEnumNetworkEvents()
		
	1、打开网络库 2、校验版本 3、创建SOCKET 4、绑定地址与端口 5、开始监听 ~~创建事件~绑定并投递~定义结构体、询问事件、得到下标~列举事件~8）事件处理~优化
		
	然后	1）创建事件：  WSACreateEvent    记得释放 不然内核空间泄露 就要重启电脑才行
			WSAEVENT  WSAVPI WSACreateEvent()  用 WSAEVENT 变量a=函数，接收值。
				没有参数，成功返回成功事件，失败返回无效的事件对象 WSA_INVALID_EVENT然后可以用WSAGetLastError获取 
		
	
		2）关闭事件：记得释放 不然内核空间泄露 就要重启电脑才行 ，后果很严重哦
			WSACloseEvent(a) 参数就是上面的创建对象

		3）重置使用的事件：	
			BOOL WSAAPI WSAResetEvent(WSAEVENT hEvent) 上面a用过有信号的时候可以重置成无信号
				参数就是 WSAEVENT a上面创建用(1)返回接收到的值 

		4）指定成有信号：
			BOOL WSAAPI WSASetEvent(WSAEVENT hEvent) 没有信号变成有信号，不可指定成具体的信号
				参数就是 WSAEVENT a上面创建用(1)返回接收到的值  

		5）绑定并且投递：  WSAEventSelect
			int WSAAPI WSAEventSelect(socket s ,WSAEVENT hEventObject, long INetworkEcents) 给事件绑上socket与操作码，并投递给操作系统
				参1：就是把 blsocket  ，绑定到上面创建的事件接收对象上 a
				参3：具体事件：  用  |  来多个属性并列  可以调用多次，不是在一行调用会覆盖，0 取消事件监视（就是不接受信号了）
					a）FD_ACCEPT 	与服务器socket绑定
					b）FD_READ  	与客户端socket绑定
					c）FD_CLOSE	客户端下线了
					d）FD_WRITE	可以给客户端发信，与客户端socket绑定，会在accept后立即生效产生该信号，说明客户端链接成功（成功后可以随时send）
					e）FD_CINNECT	在客户端代码文件中，给服务器绑定这个，没有处理 就发了一个信号（没啥用）
					f）0		取消监视事件不监视了，来啥都不给信号了
					g）还有几个不常用就不写了 MSDN上面也有可以查
			返回值：成功返回0 失败返回SOCKET_ERROR 然后记得 获取错误 释放 关闭事件 关闭网络
			
		6）等待（询问）事件：WSAWaitForMultipleEvents()
			DWORD  WSAAPI WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT *lphEvents ,BOOL fWaitAll , DWORD dwTimeout , BOOL fAlertable)
				参1： 事件的个数，就是下面结构体的 q.i
				参2：数组首地址吧 就是WSAEVENT 下面创建的数组  q.li;
				参3：事件等待的方式  true：所有事件产生信号才返回（全部都有信号以后）。false任何一个事件产生信号立即返回 值减去WSA_WAIT_EVENT_0就得到了这个发信号的下标，
					多个发信号产生信息 就返回 下标最小的
				参4：超时间隔，毫秒为单位  123 就是123毫秒只有还没有信号就超时返回WSA_WAIT_TIMEOUT，0就是不管有没有信号立即返回也是超时，WSA_INFINITE 直到事件发生（有信号）
				参5：true: 重叠io模型使用。false：现在这个事件模型直接写false
		
			返回值： 是 DWRD类型 a，数组下标的运算值 参数3为 true 就是所有信号了 不用索引谁了 直接上循环。false是 返回值减 WSA——WAIT_EVENT_0 ==数组的下标
					参4 还有就是超时了 WSA_WAIT_TIMEOUT 就直接continue 结束本次循环
				错误就是  if(a==WSA_WAIT_FAILED){ int a =WSAGetListError()出错 }  if (qw == WSA_WAIT_FAILED || qw == WSA_WAIT_TIMEOUT) //超时过着错误
		
		实例：先定义一个 事件和socket的 结构体来装他们两个的值  struct a{int i;SOCKET liu[64];WSAEVENT li[64];}; 定义初始化 struct a 成员q={0,{0},{0}}; 然后把创建的事件和socket赋值进去
			q.liu[q.i]=blsocket; q.li[q.i]=dcevent; q.i++;
			DWORD linshi=WSAWaitForMultipleEvents(q.i,q,li,FALSE,123 m,FALSE) if (q == WSA_WAIT_FAILED) 出错了{ 打印错误信息；break；}
				if (q == WSA_WAIT_TIMEOUT) //超时了{ continue；} DWORD linshi2 =linshi - WSA_WAIT_EVENT_0；  得到下标
				因为要一直询问啥的要写一个死循环在里面执行


		7）列举事件： 上个函数的到了下标
			int WSAAPI WSAEnumNetworkEvent(SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents) 
				获取事件类型，并将事件上的信号重置	
				参1：对应的socket
				参2:对应的事件
				参3：触发事件的类型在这里装着，是一个结构体指针 { 结构体里2个参数：1 具体操作，2 错误吗数组 装在FD_ACCEPT_BIT的下标里，没有错误对应的是0}
			返回值：成功返回0 失败SOCKET_ERROR 然后用谁的到还用说？
		  		
		实例：继续上面的： WSANETWORKEVENTS jgt；定义参数3结构体 if(SOCKET_ERROR==WSAEnumNetworkEvents(q.liu[linshi2],q.li[linshi2],&jgt))
					 { 获得错误码，//这得到的是函数执行的错误吗 和jgt得到的不一样。break；}


		8）事件分类处理逻辑：   一共有4个 要处理 是5）的参数3   上面有了结构体 一个是具体类型下面4个 各个操作，还有就是错误码

			1）FD_ACCEPT ：与服务器socket绑定
			实例：接着上面继续循环中：	 if(jgt.lNetworkEvents & FD_ACCEPT)  有FD_ACCEPT这个消息，{if (0 ==jgt.iErrorCode[FD_ACCEPT_BIT])没有错误码 {
				SOCKET a1 = accept(blsocket, NULL, NULL)绑定客户端 并判断是否成功（自写），WSAEVENT e1 = WSACreateEvent();创建事件并判断（自写） 不成功continue；结束本次循环
					if (SOCKET_ERROR == WSAEventSelect(lssocket, khdevent, FD_CLOSE | FD_READ | FD_WRITE))把客户端也投给系统{ 判断 }  
					装结构体里 q.liu[q.i]=a1;q.li[i]=e1;q.i++ } else{ 有错误码，是第2个的if 。continue； }}	
		
			2）FD_WRITE ：给客户端发信息
				if (jgt.lNetworkEvents & FD_WRITE) //给客户端发信息{if (0 == jgt.iErrorCode[FD_WRITE_BIT])  //没有错误码 { 
					if (SOCKET_ERROR == send(jicun.liu[qw], "chenggong", strlen("chenggong"), 0)){ 获取错误码 continue;}}else //有错误码{contiune}}

			3）FD_READ ：客户端socket绑定
				if (jgt.lNetworkEvents & FD_READ)//与客户端socket绑定{  if (0 == jgt.iErrorCode[FD_READ_BIT])//没有错误码 {  char buf[1500] = {0};
					if (SOCKET_ERROR == recv(jicun.liu[qw], buf, 1499, 0)){ 解决错误码}} else {//有错误码 continue; }}

			4)FD_CLOSE：客户端下线了
				if (jgt.lNetworkEvents & FD_CLOSE)//客户端下线了{if (0 == jgt.iErrorCode[FD_CLOSE_BIT])//没有错误码{
					closesocket(jicun.liu[qw]);  //清除 jicun.liu[qw] = jicun.liu[jicun.shuzi]; //因为是数组 不一个一个挪了，吧最后一个赋值进来
					WSACloseEvent(jicun.li[qw]);jicun.li[qw] = jicun.li[jicun.shuzi]; jicun.shuzi--;} else if (10053 == jgt.iErrorCode[FD_CLOSE_BIT])
					else //有错误码{ continue}}

	优化：
		1）有序处理： 加一个for(int qw=0;qw<q.i;qw++){ DWORD linshi=WSAWaitForMultipleEvents(1,&q.li[qw],FALSE,0,FALSE)
				if (q == WSA_WAIT_FAILED) 出错了{ 打印错误信息；break；}if (q == WSA_WAIT_TIMEOUT) //超时了{ continue；} 
					//DWORD linshi2 =linshi - WSA_WAIT_EVENT_0；  得到下标} 
			把6）的换成这个, 就不用下标了
		这个是不管有没有信号就 直接一个一个开始，下面就是从有信号的第1个开始

		2）再优化 在上面这个前面 在加上DWORD linshi=WSAWaitForMultipleEvents(q.i,q,li,FALSE,WSA_INFINITE,FALSE ) 
				if (q == WSA_WAIT_FAILED) 出错了{ 打印错误信息；break；}if (q == WSA_WAIT_TIMEOUT) //超时了{ continue；} 
					//DWORD linshi2 =linshi - WSA_WAIT_EVENT_0；  得到下标} 
				for改成for(int qw=临时2; qw<q.i;qw++) DWORD linshi=WSAWaitForMultipleEvents(1,&q.li[qw],FALSE,0,FALSE) 下面就一样了 记得把临时2 下标换成请问
		这个是从有信号的第1个开始，上面就有没有信号就 直接一个一个开始，
		
	增加事件处理数量：
		因为WSAWaitForMultipleEvents 一次调用只可以64个 （一组）
		1）一个一个投：他上面 jicun 结构体里的 liu和li换上大的 1024 然后 把优化2）的 删除到 for (int qw=0; qw < jicun.shuzi; qw++) 就行了

		2）一组一组： 在优化的基础上 定义jicun的时候 定义成jicun[20] ; memset(jicun,0,sizeof(struct a)*20);//初始化成0，
			然后服务器 和 事件装进jicun的时候是 jicun[0].liu=...  然后使用就用jicun[0]
			 在while(1) 最上面加 for(int i=0;i<20;i++) if(0==jicun[i].shuzi){continue是0就是没有参数就结束  } 因为里面是处理一组，现在全部放进去 用上下标i 就是把所有的jicun加上下标
				然后WSAWaitForMultipleEvents函数的第三个参数 等待时间改成WSA_INFINITE直到事件发生（0好像也可以）

		注意： 在处理accept新来客户端的时候 就是新来的装寄存器的时候要处理一下 用个循环for (int m = 0; m < 20; m++){if (jicun[i].shuzi< 64) { 装入操作 }}
			可以用多线程哦，一组一个线程，要注意数据accept应该是要上锁的，其他那三个不是共享吧
	然后释放： 一组一组的 要两个循环一个循环组 一个循环 个数 shuzi 一个是组数。一个的就 直接 数字 释放一个循环




异步选择模型：
		逻辑：核心：是消息队列：操作系统为每个窗口创建一个消息队列并且维护，所以就要先创建一个窗口
			第一步：将socket绑定到一个消息上，并投给操作系统，函数名 WSAAsyncSelect
			第二步：取 消息分配处理，如果有消息就会得到不同的消息指令			
		只可以用于Windows 在别的系统上可以模仿他的消息队列 然后使用
	
	创建一个win32窗口：~去win窗口 看 写出来一个 
		打开网络库~ 校验版本~创建SOCKET~绑定地址与端口~开始监听~投递消息队列~在回掉函数中case：处理消息  在 while循环上面 

	异步选择：：投递给消息队列：将socket与消息绑定在一起，并投递给操作系统，有一个投递一个 客户端有了也投进去让他管理
		int WSSAAsyncSelect(socket s, HWND hWnd, u_int wMsg , long iEvent)
			参1：socket 
			参2：窗口句柄  就是吧socket投递到这个消息队列中
			参3：定义接收的 是什么消息 本质都是整形的，  #define 在上面定义个 宏名AAAA 用函数WM_USER+1 这个是系统的定义这么多+1就是到我们的这个了 然后就填AAAA
				当服务器链接他啥的就会收到消息，可以在 窗口回调函数中switch(id)case:AAAA 进行处理 break;
			参4：就跟时间选择模型是一样的 在8）事件分类处理逻辑。里面的那几个（那里面的也不全） 可以 | 多写几个
		返回值：成功返回0 失败返回SOCKET_ERROR	
		
		取消消息托管：
		int WSSAAsyncSelect(socket s, HWND hWnd, 0,0) 后面两个都是 0就OK了	

 事件分类处理逻辑：
		在回调函数中case 里面有自己定义的AAAA 宏 ：然后做消息处理

		1）获取socket  用回调函数第3个参数来获取  ： SOCKET a=(SOCKET)wparam；在强转一下
		    获取消息 回调函数参数4  LOWORD(lparam) 地位是对应的消息，HIWORD(lparam)高位是错误码 
	实例： if(0!=HOWORD(lparam)){ 出错了就 break；可能关闭也会到这里来 下面 附加操作！！！！ }  
		switch(LOWORD(lparam)){  case：FD_ACCEPT: 操作1 break; case: FD_READ: 操作2 break; case FD_WRITE: 操作3 break; case FD_CLOSE: 操作4 break；（最后一个不用break也行） }
			操作1：跟事件处理一样   SOCKET kehud = accept(sock, NULL, NULL);if (kehud == INVALID_SOCKET){ 有错误 break；}
				shuzu[jishu] = kehud;jishu++;全局socket数组 jishu是下标 不然多个消息就会覆盖 这样可以存多个了
				 if (SOCKET_ERROR == WSAAsyncSelect(shuzu[jishu], chuk, UM_DIYIGE, FD_ACCEPT | FD_READ | FD_WRITE)) 投递给消息队列{ 错误 释放kehud bareak；} 结尾有个break；

			操作2：跟事件处理一样  TextOut(q, 0,0, TEXT("recv"), strlen("recv")); 进来先打印一下   char buf[1500] = { 0 };第一接收并初始化
			 if (SOCKET_ERROR == recv(shuzu[jishu-1], buf, 1499, 0)) 定义全局的吧客户端装进去了 现在使用刚才的客户端（也可以使用上面SOCKET接收的a）{ 判读错误 break；}
				TextOut(q, 30, x, buf, strlen(buf)); 打印 接收客户端的  break；

			操作3：跟事件处理一样 根据上面的应该可以懂吧 没讲 不知道怎么用窗口给客户端发信息呀

			操作4：TextOut(q, 0, x, _T("close"), strlen("close"));打印个消息 WSAAsyncSelect(sock, chuk, 0, 0); //关闭socket的消息  closesocket(sock);//关闭socket 
				 //删除全局数组中的socket ，for (int i = 0; i < jishu; i++) {if (sock == shuzu[i]){shuzu[i] = shuzu[jishu - 1];  jishu--;}} break；
	
			附加操作：if (WSAECONNABORTED == HIWORD(lparam)){  TextOut(q, 0, x, _T("close"), strlen("close"));打印个消息 WSAAsyncSelect(sock, chuk, 0, 0); //关闭socket的消息  
				closesocket(sock);/关闭socket  /删除全局数组中的socket ，for (int i = 0; i < jishu; i++) {if (sock == shuzu[i]){shuzu[i] = shuzu[jishu - 1];  jishu--;}} break；}

		窗口上输出函数：  文本输出
			TextOut(HDC bdc ， int x ，int y，LCPWSTR lpString，int c );
				参1：设备环境句柄 指的就是客户区的 id  在回调函数最开始的到  HDC a=GetDC(chuk)；窗口句柄得到
				参2：要显示的字符串的起始位置 在那个位置显示
				参3：上面是横坐标 这是纵坐标
				参4：就是 输出的那句话
				参5：这段长度的大小 用strlen是最好的 不加/0
		释放HDC：在回调函数结束的时候return 前释放 
			ReleaseDC(hwnd,hdc) 
				参1：窗口句柄
				参2：设备环境句柄上面那个

		然后在 主函数结束前 记得关闭 socket 全局的那个数组for (int i = 0; i < jishu; i++){  closesocket(shuzu[i]);}
	
	优化：每个窗口维护一定的，然后创建多个线程，每个线程一个窗口，每个窗口投递一定数量的客户端

	有个问题： 在一次处理过程中，客户端产生多从send，服务器会产生多次接收信息 第一次接收会收完所有的信息



重叠io模型：
		意义：window提供的异步读写文件机制  recv正在读的时候是阻塞的 
		作用：投递给系统 他开一个线程来干这些事  可以同时读写的操作 将 accept和recv send优化成了异步过程 被 acceptEX WSARecv WSASend 函数代替了
		本质：就是一个结构体 WSAOVERLAPPED（叫重叠结构） 前4个成员系统使用的（不用管） 最后一个：事件对象 我们唯一关注的 操作完成他就会被置成有信号  
			定义一个这样的结构体变量与socket绑定
		

	1）事件通知：
		实现逻辑： a）创建：事件数组（也可以不创建用重叠结构体里面的），socket数组、重叠结构体数组。下标相同的绑定一组
			b）创建重叠io模型使用的socket  用WSASocket函数
			c）投递AcceptEx： 立即完成：有客户端链接正在等 直接去处理
					延迟完成：没有等待 你延时呗 
			d）循环等信号： 等待信号：WSAWaitMultipleEvents()
				     有信号：获取重叠结构上的消息  然后处理消息

		a）打开网络库~ 校验版本 ~创建SOCKET 函数韩城WSASocket ~绑定地址与端口 ~ 开始监听 ~重叠io开始了~投递异步接收请求链接（封装成函数）在里面进行操作
		
		b）定义 SOCKET 和重叠io（VOERLAPPED）两个全局数组 和一个计数器（来当下标）不用初始化（c里面默认给全局初始化）	
		
		c）改变创建SOCKET函数:  换成WSASocket
			WSASocket( int af , int type , int protocol,LPWSAPROTOCOL_INFOA lpPrptpcpllnfo , GROUP g, DWORD dwFlags)
					比他多了几个参数： 前3个是socket有的 都一样
				参4：指向WSAPROTOCOL_INFOA结构的指针：设置套接字更详细的属性使用的时候可以去设置 去MSDN查 
					不适使用就 NULL
				参5：一组socket的 组id，大概是一次想操作多个socket  保留 填0 不会使
				参6：指定套接字属性：WSA_FLAG_OVERLAPPED 创建一个供重叠io使用的socket
					还有：3个用于多播协议 
					WSA_FLAG_ACCESS_SYSTEM_SECURITY 套接字权限 配合参4里面的成员 可以在send的时候触发相关权限设置
					WSA_FLAG_NO_HANDLE_INHERIT  套接字不可以继承（只能共享使用一个） 在多线程开发中
			返回值：成功返回socket 失败返回 INVALID_SOCKET 实例： if (blsocket == INVALID_SOCKET){  错误处理}
				实例：SOCKET blsocket = WSASocket(AF_INET, SOCK_STREAM, 0,NULL,0,WSA_FLAG_OVERLAPPED);
			
		d）给全局赋值： sockshu[jishu] = blsocket;  chongdie[jishu].hEvent = WSACreateEvent();  //也创建一个事件 赋值给 全局重叠数组  jishu++；
  
 		在这里主函数要先调用第一次hanshu1 判断if (hanshu1() != 0)  //调用函数{  //关闭数组socket 和重叠 关闭网络 return 0 }

		e）投递异步接收请求链接： 封装成一个函数，不然太多太乱  头文件<mswsock.h>  #pragma comment(lib,"Mswsock.lib")还有一个静态链接库
			BOOL AcceptEX(SOCKET sL,SOCKET sA,PVOID lpOutp, DWORD dwRec, DWORD dwLoca ,DWORD dwREmo, LPDWORD lpdwByt ,LPOVERAPPED lpOver) 具体MSDN省略名字了
				作用：将服务器的socket投递进去 让系统开一个线程去监视着socket 然后随时接收客户端的链接 让这个链接变成socket 让我们使用 
	
				参1：服务器socket 刚才装进了 全局数组sockshu里面了 就用sockshu[0]来
				参2：客户端的socket  创建一个socket 然后又客户端来了 地址端口就绑定到这个socket上 ，用c）创建好 然后在执行d）操作就在给全局了 jishu接收到了在++没成功加了干嘛
				参3：缓冲区指针，接收新连接上发送的第一个数据，客户端第一次send有他接收，然后就是 WSARecv接收了 不可以设置NULL char buf[1024]接收下嘛
				参4： 设置0 取消了参3的功能 想接收就设置成和参3对应的1024呗。不接收 都用函数WSARecv接收 就算是它填0 参3也不可能填NULL
				参5：为本地地址信息保留的字节数，至少比传输协议的最大地址长16个字节，用 sizeof(struct sockaddr_in)+16（至少+16 ）
				参6：为远程地址信息保留的字节数，至少比传输协议的最大地址长16个字节，不能为0，用 sizeof(struct sockaddr_in)+16（至少+16 ）
				参7：配合参3参4使用的 使用参数3发来多少数据 就在这里装着（在立即执行的时候才有）延后执行接收不到  可以填NULL 不想获取他 ，也可以创建一个DWORD 变量js 传地址进去
				参8：重叠结构  就是装进全局数组里面的 &chongdie[jishu]
			返回值：TRUE：立即完成 刚执行就有客户端到了， FALSE： 出错：int a=WSAGetListError() 如果 a==ERROR_IO_PENDING 就是异步等待 客户端还没来，其他的都是错误码解决
			
	A)实例：上面写好装全局里面去以后，写函数（封装一下）
			int hanshu1(){  sockshu[jishu]=WSASocket(AF_INET, SOCK_STREAM, 0, NULL, 0, WSA_FLAG_OVERLAPPED); 创建客户端装进去}chongdie[jishu].hEvent = WSACreateEvent();
				重叠io跟上 (等下再jishu++) char buf[1024] = { 0 }; DWORD js;定义两个要用的参数
				BOOL qaz=AcceptEx(sockshu[0],sockshu[jishu],buf,0,sizeof(struct sockaddr_in)+16,sizeof(struct sockaddr_in)+16,&js,chongdie[jishu]);
			if(qaz==TRUE){ //立即完成 操作1} else{ int a = WSAGetLastError(); if (a == ERROR_IO_PENDING){ 	//延迟等待 return 0;  //没有错}else{ //错误处理 return a; //返回错误码}}	
		
		f） int WSARecv(SOCKET s, LPWSABUF lpBuff , DWORD dwBuff, LPDWORD lpNumber , LPDWORD lpFlags , LPWSAOVERLAPPED lpOver , LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCo)
			名字不全 想看去MSDN
			功能：投递异步接收信息，立即完成和演示完成
			参1：客户端的socket  sockshu[xiabiao]
			参2：接收到的信息存储buf 是一个WSABUF的结构体 变量， 有两个参数buf是指针， 指向 全局定义吧char str[1024],另一个是 len 是指向的大小，可以看成吧两个参数放着一个结构体里面了
			参3： 有几个参数2这样的结构体
			参4：如果结构成功就装着成功的字节数 如果参6重叠结构不为NULL这里就可以设置成NULL 也是DWORD 变量名 传地址去
			参5：指向用于WSARecv函数调用行为的标志指针  0 是正常读取  还有几个宏（MSDN查）  或者DWORD flg = 0; 传&flg
			参6：重叠类型， 这个重叠和socket是对应的  &chongdie[xiabiao]
			参7：回调函数 这地方用不到（在完成例程中）现在 就NULL  LPWSAOVERLAPPED_COMPLETION_ROUTINE转定义看
		返回值：立即发生返回0 计算机比较闲， SOCKET_ERROR {过去错误码}

	B）实例：这个是在A中调用的另一个函数：int hanshu2(int xiabiao){ WSABUF can2;参数2结构体can2.buf = str; can2.len = 1024; str是char定义的全局的（和平常的buf一样）
			DWORD zijie;参4定义的字节， int qaz=WSARecv(sockshu[xiabiao],&can2,1, &zijie,0,&chongdie[xiabiao],NULL); if (qaz == 0){ 立即完成  操作2}
				else{ int a = WSAGetLastError(); if (a == WSA_IO_PENDING){ //延迟等待 return 0; }else{//错误码 错误处理}} }
		
		g）BOOL WSAAPI WSAGetOverlappedResult( SOCKET s, LPWSOVERLAPPED lpOver , LPDWORD lpbTran , BOOL fWait , LPDWPRD  lpdwFlags)获取对应socket上的具体情况 还是那4种
			参1：有信号的socket  sockshu[i]
			参2：对应的重叠结构 记得传地址  chongdie[i].hEvent
			参3：有发送或接受到的实际字节数  0表示客户端下线 定义一个DWORD 变量 传值进去       不等于0//发送或者接受成功了
			参4：选择事件通知 填 TRUE
			参5：装WSARecv  f）参数5的lpFlags的意义一模一样  不可以是NULL 定义一个DWORD 变量 传值进去
		返回值：FALSE 执行失败 错误码10054强制退出   TURE 执行成功

		h）WSARestEvent(chongdie[i].hEvent);  //信号置空    参数是重叠io的 hEvent   因为上面那几个都是自动的 这个要手动来一下


	C）主函数中调用 d）赋值后，调用函数A实例，然后 while(1){ for(int i=0;i<jishu;i++){int qw=WSAWaitForMultipleEvents(1,chongdie[i].hEvent,FALSE,0,FALSE); //等待询问事件
		if (qw == WSA_WAIT_FAILED || qw == WSA_WAIT_TIMEOUT) //超时或者错误{continue；}//有信号了DWORD zhuangt;DWORD Flag;
		BOOL qw=WSAGetOverlappedResult(sockshu[i],chongdie[i].hEvent,&zhuangt,TRUE,&Flag);//获取对应socket上的具体情况 还是那4种
			WSARestEvent(chongdie[i].hEvent);  //信号置空
		if (qw = FALSE){continue////失败操作3}成功if (i == 0){ //有链接了 操作4} if(0 == zhuangt){客户端下线操作 操作5} if (zhuangt != 0){//发送或者接受成功了 操作6}} }

		操作1：//立即完成//投递recv。hanshu2(jishu); jishu++;hanshu1(); //就递归，如果不在函数中 就死循环被 return 变break； 有的变continue

		操作2： //立即完成 printf("%s\n", can2.buf); memset(str, 0, 1024); //打印以后情况一下 防止内容重叠接收 hanshu2(xiabiao);  //d递归在传递 调用一次只接收一串  return 0;

		操作3：int a = WSAGetLastError();if (a == 10054){ //客户端下线//关闭socket和重叠  closesocket(sockshu[i]); WSACloseEvent(chongdie[i].hEvent); //从数组中删除
			sockshu[i] = sockshu[jishu - 1];  //在使用jishu前已经加加了 所以要-1 chongdie[i].hEvent = chongdie[jishu - 1].hEvent;
			i--;  //交换最有一个 就处理不到最后一个交换过来的了就--      jishu--;   continue;}

		操作4：printf("连接上了\n");  hanshu2(jishu);//根据情况投递send    jishu++; //投递accept hanshu1(); //就递归，如果不在函数中 就死循环被 return 变break； 有的变continue continue;

		操作5：printf("xiaxian\n"); 操作 3中客户端下线的代码 ;if (a == 10054){ 这里}
		
		操作6：//发送或者接受成功了 if (str[0] != 0) //因为全局赋值了{  printf("%s", str);  memset(str, 0, 1024); //打印后初始化  hanshu2(i);  //再次投递信息} else {  //send发送消息}

		

		i） int WSARend(SOCKET s, LPWSABUF lpBuff , DWORD dwBuff, LPDWORD lpNumber , DWORD dwFlags , LPWSAOVERLAPPED lpOver , LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCo)
			   投递异步信息            名字不全 想看去MSDN
			功能：投递异步接收信息，立即完成和演示完成
			参1：客户端的socket
			参2：接收到的信息存储buf 是一个WSABUF的结构体 变量， 有两个参数buf是指针， 指向 全局定义吧char str[1024],另一个是 len 是指向的大小，可以看成吧两个参数放着一个结构体里面了
			参3： 有几个参数2这样的结构体
			参4：如果结构成功就装着成功的字节数 如果参6重叠结构不为NULL这里就可以设置成NULL 也是DWORD 变量名 传地址去
			参5：指向用于WSARecv函数调用行为的标志指针  0 是正常读取  还有几个宏（MSDN查）
			参6：重叠类型， 这个重叠和socket是对应的
			参7：回调函数 这地方用不到（在完成例程中）现在 就NULL
		返回值：立即发生返回0 计算机比较闲， SOCKET_ERROR {过去错误码}


	2）完成例程（回调函数）：

		打开网络库~ 校验版本 ~创建SOCKET 函数韩城WSASocket ~绑定地址与端口 ~ 开始监听 ~重叠io开始了~Accept和上面一样 就是Recv和Send不同
		
	把 Recv 的 最后一个参数 写成回调函数的名字

		回调函数：
			void  WSAAPI（CALLBACK）  huidiao(DWORD dwError,DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags) 
				函数名和参数名自己起的
			返回值：void类型
			调用约定：CALLBACK
			参1：错误码
			参2：发生或者接受数据的字节数
			参3：重叠结构传递给我们
			参4：执行方式
			处理流程： 参1 ==10054 强制退出   参2 ==0 正常退出 else 接收成功   else处理数据 

		得到socket 和重叠的下标： 用循环遍历 来比较      这个是函数最先执行
			实例：void  WSAAPI  huidiao(DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags)
				int  i = lpOverlapped - &chongdie[0];  //获取下标  if (dwError == 10054 || 0==cbTransferred){  客户端下线 处理上面操作 3 i--删掉}
				else{printf("%s\n", str);   	memset(str, 0, 1024); //打印后初始化   hanshu2(i);  //再次投递信息 }
				
			
			while(1){   只有接收链接那个留下，其他都删除 就是 if(i==0)这个 }  等待信号就设置成一直等待（参数改一下） 等待服务器没有时间
			int qwer = WSAWaitForMultipleEvents(1, &(chongdie[i].hEvent), FALSE, WSA_INFINITE, TRUE); 
				TRUE：是将等待事件与完成例程结合在一起   就不会卡死等待了（就异步了）
			if (qwer == WSA_WAIT_FAILED || qwer == WSA_WAIT_TIMEOUT){  continue;  //超时或错误}  //有链接信号 就一定是服务器的信号WSAResetEvent(chongdie[0].hEvent);//信号置空
				printf("连接上了\n"); hanshu3(jishu);  hanshu2(jishu); jishu++; hanshu1();  continue;



完成端口：
		1、模仿消息队列，创造一个通知队列，系统创建 保证有序，不做无用功
		2、常见最佳有数量的线程，充分利用cpu的性能

	代码逻辑：将重叠套接字（服务器+客户端）与一个完成端口绑定到一起，上面重叠异步 消息都是每个绑定不同的，这个是所有的socket都和他绑定到一起
		代码：创建完成端口：CreateloCompletionPort。2、将完成端口与socket绑定：CreateloCompletionStatus 3、创建指定数目的线程：CUP核数一样：VreateThread 
			线程内部：GetQueuedCompletionStatus 拿东西~分类处理  4、使用Accept  WSARecv  WSASend投递请求（重叠io一模一样的）5、主线程阻塞（不阻塞就执行结束了不等你）

	步骤：打开网络库~校验版本~创建SOCKET~绑定地址与端口~创建完成端口~完成端口与socketServer绑定~开始监听~创建线程~完成端口开始了~其他
	先创建~在绑定也是这个函数
		HANDLE  CreateIoCompletionPort(HANDLE File ,HANDLE Exis ULONG_PTR Comlpe DWORD Number ) 创建一个完成端口 将端口与socket绑定在一起
			参1：创建完成端口 填这个INVALID_HANDLE_VALUE 参2必须填NULL 参3忽略 填0吧
			参4：允许次端口上最多同时运行的线程数量 填0系统会自动获取cpu的核数
		返回值：创建端口：成功 ：参2为NULL 返回一个新的完成端口   
				失败返回0 用Getlasterror获取错误码 完成端口是 Windows的机制 不是网络专属  文件操作也可以
	
		HANDLE  CreateIoCompletionPort(HANDLE File ,HANDLE Exis ULONG_PTR Comlpe DWORD Number ) 创建一个完成端口 将端口与socket绑定在一起
			参1：服务器的socket 
			参2：完成端口的变量  上面创建接收返回的变量HANDLE 
			参3：再次传递blsocket  也可以传递下标 下面函数的这个类型一样可以得到
			参4：允许次端口上最多同时运行的线程数量 填0系统会自动获取cpu的核数
		返回值：当参数2不为NULL 返回自己   当和创建的时候返回值不同就是错误

	关闭完成端口
		CloseHandle(hport);

	实例：HANDLE hPort= CreateIoCompletionPort(INVALID_HANDLE_VALUE , NULL, 0, 0); //创建完成端口 if (hPort == 0){ 错误处理}
		HANDLE hPort1 = CreateIoCompletionPort((HANDLE)blsocket,hPort, 0, 0);//绑定完成端口 if (hPort1!=hPort){  错误处理+CloseHandle(hport)} 这个参3是0 因为socket对应的全局sockshu是0

	
	先获取核数 数量：
		SYSTEM_INFO heshu;  GetSystemInfo(&heshu);  int jihe = heshu.dwNumberOfProcessors;  //获取核数个数


	创建线程： 调用一次就是创建一根线程
		HANDLE CreateThread(LPSECURITY_ATTRIBUTES lpThread， SIZE_T dwStack, LPTHREAD_START_ROUTINE lpStarAddress,LPVOID lpPar,DWORD dwCrea,LPDWORD lpThread)
			参1：线程句柄是否被继承 NULL不可继承 ，指定线程权限 默认是NULL
			参2：线程栈的大小 填0  默认是1M 字节单位 1M=1024*1024
			参3：线程函数的地址  创建线程： DWORD WSAAPI xiancheng(LPVOID lpParameter) //线程函数 名字和参数名自己随意写 
			参4：外部数据传递给线程内部 可以传递完成端口	
			参5：创建出来的状态  0：立即执行  CREATE_SUSPENDED创建线程完挂起传·状态 调用ResumeThread启动函数 
				 STACK_SIZE_PAPAM_IS_PESERVATION 跟参2关联 设置这个参2设施的才有效，不然不是自己设置的
			参6：线程 id 可以填NULL 使用线程id 创建一个变量记录一下
.
		返回值:成功返回 线程句柄（内核对象）最后要释放的（CloseHandle） 失败返回NULL 用Getlasterror 的到错误码
		
		实例：HANDLE* pThread = (HANDLE *)malloc(sizeof(HANDLE) * jihe);//创建一个数组装着线程  
			for(int i;i<jihe;i++) {pThread[i]=CreateThread(NULL,0,xiancheng,hPort,0,NULL); if (NULL == pThread[i]){错误处理}}
		
		阻塞主线程 不可以让结束 while(1){ sleep(1000) 停止1秒 可以把cpu腾出来了}
		记得释放线程，记得释存放线程申请的内存空间
		
	线程函数：DWORD WSAAPI xiancheng(LPVOID lpParameter) //线程函数 名字和参数名自己随意写 
		BOOL WINAPI GetQueuedCompletionStatus(HANDLE Comple,LPDWORD lpNumber, PULONG_PTR lpConple , LPOVERLAPPED *lpover, DWORD dwMillise) 
				无通知 线程挂起 不占用CPU的时间非常棒
			功能：尝试从指定的i/o完成端口出列i/o完成数据包
			参1： 完成端口 从主函数传进来的 就是上面的 hPort（全局的直接用） 也可以HANDLE a=线程函数参数(HANDLE)lpParameter 因为刚才创建参4传递了
			参2：接收或者发送的字节数  （客户端的 收到的是0说明客户端退出了） 定义DWORD变量传址进去
			参3：完成端口得来的参3传进来的东西  这次外面传递进来的（下标 ）然后定义PULONG_PTR 变量传地址进去
			参4：重叠结构  也是定义OVERLAPPED变量传地址
			参5：等待事件：INFINTE一直等 闲着也是闲着  1234 等1234毫秒
		返回值：成功返回TURE 失败返回FALSE 错误码处理 continue
	
	实例：DWORD WSAAPI xiancheng(LPVOID lpParameter) //线程函数{  HANDLE port = (HANDLE)lpParameter;DWORD zijie;ULONG_PTR index; LPOVERLAPPED Overlapped;
		while (1){ BOOL bFlg = GetQueuedCompletionStatus(hPort, &zijie, &index, &Overlapped, INFINITE);if (FALSE == bFlg){ 错误处理 continue；}
		if (0 == index)  //下标第一个是0 就是服务器的，不是0就是客户端的{ //绑定完成端口 HANDLE hPort1 = CreateIoCompletionPort((HANDLE)sockshu[jishu], hPort, jishu, 0);
			if (hPort1 != hPort){ 错误处理 continue；}//新客户端投递hanshu2(jishu);jishu++;hanshu1();} else{if (0 == zijie)//没有收到zije客户端下线{处理}
				else{if (0 != str[0]){//接收到了 recv printf("%s\n", str);memset(str, 0, 1024); hanshu2((int)index);}else{ send}}}}} 
	


71：基础知识



udp/ip 协议： 

	特点：非面向链接的、不可靠的、基于数据报的传输











