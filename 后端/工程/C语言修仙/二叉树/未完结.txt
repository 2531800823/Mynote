#include<stdio.h>
#include<stdlib.h>

 typedef struct treeNode
{
	char data;	//以char 类型左数据分析
	struct treeNode* LChild; //左子树
	struct treeNode* RChild;//右子树

}STU;
//1.创建树
STU* createNode(char data) {
	STU* newNode = (STU*)malloc(sizeof(STU));
	newNode->data = data;
	newNode->LChild = NULL;
	newNode->RChild = NULL;
	return newNode;
}

//2.链接节点
void insertNode(STU* curNode, STU* LChidNode, STU* RChildNode)
{
	curNode->LChild = LChidNode;  //左边的插左边
	curNode->RChild = RChildNode;  //右边的在右边
}
//打印表示遍历
void printData(STU* curNode) //当做打印的函数
{
	printf("%c  ", curNode->data);

}
//先序遍历
void midOrder(STU* tree)
{
	if (tree != NULL)
	{
		
		midOrder(tree->LChild);
		printData(tree);
		midOrder(tree->RChild);
	}
}
//3.递归中序遍历
void mdOrder(STU* tree)
{
	if (tree != NULL)
	{
		printData(tree);
		mdOrder(tree->LChild);
		mdOrder(tree->RChild);
	}
}
//后续遍历
void mpreOrder(STU* tree)
{
	if (tree != NULL)
	{
		
		mpreOrder(tree->LChild);
		mpreOrder(tree->RChild);
		printData(tree);
	}
}

//非递归的方式
void midOrderByStack(STU* tree)
{
	//空树
	if (tree == NULL)
		return;
	//初始化一个栈
	STU*  stack[10];
	int stackTop = -1; //入栈一个元素，==0

	STU* pMove = tree;  //来一个移动的指针
	while (stackTop != -1 || pMove)
	{
		//走完路后，脚印留下
		while(pMove){
		stack[++stackTop] = pMove;
		pMove = pMove->LChild;
		}
		//pMove==NULL 没有左边是不是要去找右边
		if (stackTop != -1) {
			pMove = stack[stackTop--];
			printf("%c  ", pMove->data);
			pMove=pMove->RChild;
			
		}
	}



}


int main(void)
{
	//创建所有节点
	STU* A = createNode('A');
	STU* B = createNode('B');
	STU* C = createNode('C');
	STU* D = createNode('D');
	STU* E = createNode('E');
	STU* F = createNode('F');
	STU* G = createNode('G');
	STU* H = createNode('H');
	STU* K = createNode('K');

	//做链接操作
	insertNode(A,B,C);
	insertNode(	B, D, E);
	insertNode(C,F,G);
	insertNode(F,NULL,K);
	//遍历：每个节点都打印出来
	mpreOrder(A);
	putchar('\n');
	midOrderByStack(A);
	putchar('\n');
	system("pause");
	return 0;
}