#include <stdio.h>
#include<stdlib.h>
 //1.抽象出数据结构
typedef struct doubleList
{
	int data;
	struct doubleList *front;
	struct doubleList *tail;
}STU;
//2.创建表头表示链表：创建标过程
STU* createList()
{
	//把指针变成变量
	STU* headNode = (STU*)malloc(sizeof(STU));
	//变量的基本准则：使用前要初始化
	//有表头：数据差异化当做表头
	headNode->front = headNode->tail = headNode; //表头表尾指向自身
	return headNode;

}
//3.为插入做准备：创建插入的结点
STU *createNode(int data )
{
	//C语言：堆内存申请： malloc+free
	//c++:new + dalete
	STU *newNode = (STU*)malloc(sizeof(STU));
	newNode->data = data;
	newNode->tail =newNode->front= NULL;
	return newNode;
}
//插曲，不写序号了，：表头插入
void inserNodeByHead(STU* headNode, int data)
{
	//创建一个新的结点
	STU* newNode = createNode(data);
	//headNode->tail = newNode;  这一句必须在newNode->tail = headNode->tail;下面不然就丢了
	newNode->front = headNode;   //新建指向头
	headNode->tail->front = newNode; //头的下一个的头指向新建
	newNode->tail = headNode->tail; //新建的尾指向头的下一个，连接上
	headNode->tail = newNode;//头的尾指向新建 

}
//4.插入：表尾插入
void insertNodeByTail(STU*headNode, int data)
{
	STU* newNode = createNode(data);
	//找到lastNode
	STU* lastNode = headNode;
	while (lastNode->tail  !=headNode)
	{
		lastNode = lastNode->tail;
	}
	newNode->tail = lastNode->tail; //新建的尾通过尾指向头
	lastNode->tail->front = newNode; //尾指向头的头指向新的
	newNode->front = lastNode;//新的头指向尾
	lastNode->tail = newNode;//尾的尾指向新的
}
//5.指定位置删除
void deleteNode(STU* headNode,int posData)
{
	STU* posNode = headNode->tail;
	STU* posNodeFront = headNode;
	while (posNode->data!=posData)
	{
		posNodeFront = posNode;
		posNode = posNode->tail;
		if (posNode->tail == headNode)
		{
			printf("不存在\n");
			return;
		}
	}
	posNodeFront->tail = posNode->tail;
	posNode->tail->front = posNodeFront;
	free(posNode);

}
//6.打印链表
void printList(STU* headNode)
{
	STU* pMove = headNode->front; //新建一个让他指向有数据的节点,让他赋值为空头后的指针是逆向打印
	while (pMove!= headNode)  //判断新建的是否为空头
	{
		printf("%d  ", pMove->data);
		pMove = pMove->front;  //一个一个找
	}
	printf("\n");
}
int main(void)
{
	STU* list = createList(); //创建一个链表，传递回来
	inserNodeByHead(list, 1); //头插法
	inserNodeByHead(list, 2);//头插法
	inserNodeByHead(list, 3);//头插法
	insertNodeByTail(list, 4);//尾插法
	printList(list);  //打印
	insertNodeByTail(list, 0);  //尾插法
	deleteNode(list, 3);//指定位置删除
	deleteNode(list, 4);//指定位置删除
	printList(list);//打印
	system("pause");
	return 0;

}