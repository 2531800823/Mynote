"#"是管理员  其他的都是$
sudo 可以从普通变成管理员	
	~$ su 临时管理员

 ; 可以执行多个命令但是有冲突  需要加一个 \ 表明该条命令未结束
				
用户名	/. w hoaml
主机名	hostname

快捷键：
	ctrl+c : 可以取消命令
	ctrl+d: 结束输入
	ctrl+l:清屏

关机	sudo shutdown -h now  立即关机
重新启动	sudo shutdown -r now | | sudo reboot now 这两个要有管理员权限
定时关机	sudo shutdown -h +45 "可以打印字符提示一下，就关机了"  定时45分钟以后关机  ctrl+c : 可以取消命令
定时重启 和上面一样

补齐命令		TAB   按一下是文件补齐，两下是命令补齐
清屏		clear    或   ctrl+l
当前位置		pwd  
切换目录		cd   cd ..返回上一个目录
显示当前目录文件	ls   ls -l 显示文件属性   -a  把 . 开头的文件也显示出来  -R 显示的啥 超级多 不知道
创建文件		touch
复制文件		cp
移动		mv
删除		rm    
显示文件内容	cat  还有  head  还有  tail
统计文件内容	wc  -c -w -l   行  单词  字符（字节）
查询历史命令	上 下箭头可以换来换去想要那个直接回车    history      显示所有历史命令(后面加参数可以显示多少行 )
显示历史命令容量	 echo $HISTSIZE  默认1000条  打印历史命令容量
修改历史命令容量	HISIZZE=1000   数字是改多少
查看用户信息	grep  "linux" /etc/passwd       因为passwd里面用户多，就只看Linux的
查看进程信息	ps -ef
打开文件		open
打印文件		echo "要打印进去的东西" >文件名称    （一个>没就重新写一个，有也重新，>>没有重写，有在后面写）
输入一个串打印	echo -n 打印的东西    可以起到提示作用  不加“”多个空格显示一个，加“”保留格式
系统维护改密码	passwd   还可以在后面加  u1 可以改自己用户的东西， 加上sudo 管理员
临时改变用户	su -c  -m  -   -c表示执行一个命令后就结束，-m表示仍保留环境变量不变，-表示转换用户身份是，同时改用户的环境
查看时间		data  显示当前时间  -s 设置新时间，要管理员权限
查看磁盘情况	df  -a 列出所有系统文件（包括虚拟文件） -T显示物理文件系统的文件格式  -h 显示大小以 G、M、K显示  -k 列出磁盘分配情况  -l仅列出本地文件系统
查看目录文件磁盘块	du  -a 仅显示空闲文件数 -h 列出磁盘情况  -s 列出总空闲空间
添加用户	 	# adduser 用户名     #是管理员身份 还有很多配置文件 什么的输入命令，要百度去查咯 
修改用户属性	usermod  怎么用自己查
删除用户		deluser    同上
添加用户组	addgroup 要创建组的名称

或者		-o


通配符： 
	查找用他们可以很快，
匹配任意字符	*   例如：file_*.text  匹配到 file_wang.text 、file_Lee.text  *前面必须一样
一个长度的字符	？ 例如：file_？.text 匹配到 file_w.text 、file_1.text  只要是1个的都打印
匹配其中一个字符	[ ]  可以把希望处理的文件列举出来  例如：file_[otr].text 匹配到 file_o.text 、file_t.text 、file_r.text
指定范围匹配字符	[ - ]  两边填从哪到哪   匹配a~z中和这个样式一样的所有文件，可以配合下面的除了a~z所有文件
除了他们都找	[^  ]  除了方括号里面的其他的都打印出来，匹配到的只能有一个字符0或多都不对  还用例如吗？ 自己想吧 

管道：	
	把多个命令连接起来
 |  	例如：ls /目录/目录 | wc -w(不知道wc、ls上去查)	第一个输出命令的结果就成了第二个的输入

输入输出重定向
新建模式	>file	如果文件不存在就创建一个新的，如果存在就把文件清空写入一个新的  例如:  ls  /（不是这个就是管道） >file(把ls下文件的目录都存储到新建的file文件中了)
追加模式	>>file	如果文件不存在创建，如果存在会在原有内容后面写入  例如： ls  / （不是这个就是管道） >>file（打开在上面文件在他后面继续写入）
输入源	<file	经常用于拿来统计， wc<file  把file中的内容传给wc命令（wc干嘛的上面查） 用wc是也可以省略<
将产生的错误信息输入到文件中	2>或&>（>>就变成了追加模式） 只有 > 的话是只能保存正确的 带上2>是错误的  &>这个是不管对错都输入   例如：ls file.txt 2>err.log,使用 ls 查看 如果文件不存在，将系统错误提示保存在err.log文件中 

命令置换：
`	Esc下面的  `  这个符号  例如：被 ` ` 包裹的内容在后，前面命令的输出，给包裹然后输入，和管道相似
$( )	和上面那个是一样的

获取联机帮助	man  要查的命令     查看这个命令的使用  q退出 上下键可操作
		查系统应用  man 2..     库函数  man 3 ..        man man可看里面的东西，想看man 里面那个文件的数字，man 数字

进程：
	（任务管理器）
 ps命令：R（带+是前台不加是后台运行）正在执行 S阻塞状态 T暂停执行 Z 不存在但暂时无法消除 D不可中断的进制  <高优先级的进程 N低优先级的进程 L有内存分页分配并锁在内存中
ps aux | grep out.c（后面加管道这些就是查看单个）  查看任务进程
	（监视进程）
 top命令：top 动态监视过程，看看运行了什么 renice -n 数字（变成多少）数字（第几个），可以改变进程的大小，Q建退出top命令
pstree命令：将所有行程以树形式显示 
kill命令：终止进程  kill -l 显示当前系统中所有的信号 kill -10(默认15)  数字（进程的编号）


文件命令：

file命令：显示出文件类型
mkdir命令： 创建一个目录   -p   可以一下创建多个嵌套的文件  例如mkdir -p 新建1/新建1/新建1  就一下创建了3层文件
rmdir命令	:  删除一个目录  -p   跟上面相同 就是一个是删除一个是创建  也可以用上面 rm -r 直接把头删除
in命令： 创建文件的链接  -s 表示创建软连接（软连接是绝对路径）硬链接删除了貌似可以找到哦  in -s 为那个文件创建 生成什么名字  使用 ls -l 可以查看
压缩：
gizp压缩： -l 查看压 缩信息，文件数 大小 压缩等比参数，并不进行解压缩   -d gzip文件解压和gunzip文件相同  -num  指定压缩比例 num为1~9个等级    （压缩以后文件夹就没有了）
gunzip解压：后边加压缩包名
tar命令：可以将多个文件合并为一个文件，用于备份和压缩，可以同时执行后面多个命令一起  -t显示归档文件中内容 -x释放归档文件(解压+vjf或-xvzf)  -u更新归档文件  -c创建一个新的归档文件（后缀.tar）  -v显示归档和释放的过程  -f用户指定归档的文件名，不然就是默认  -j由tar生成归档然后bzip压缩(后缀.bz)  -z由tar生成归档然后gzip压缩（后缀是.gz）  要给文件加上后缀


网络：
ifconfig命令：查看网卡什么的ip地址，子掩码啥的英文看不懂   eth1 指定网卡名称，只看哪一个  
 dhclient   : 动态获取IP地址
ping命令：查看网络连接情况   -c 数字  打算ping几次，不然会一直ping
nslookup命令： 根据域名获取IP地址

Shell编程：chmod命令：赋予执行权限 	u+x(加上这个)   ./文件名执行（后面可以加文件名，来执行编辑好的命令对这个程序执行）
 1、要以 .sh 结尾方便阅读？ 2、 可以把上面的命令写在一个文件里 然后执行这个文件 3、没有数据类型，任何赋值都解释为一串字符  4、打印的时候加上$然后赋值的变量名5、赋值的时候=两边不可以加空格
有四种变量 ：1、用户自定义变量（建议大写，调用时在变量前加$） 2、位置变量即命令行参数 3、预定义变量 4、环境变量
echo : 调用变量(输出 C语言printf类似) 用变量的时候要加上$    -n不换行 
unset : 删除变量内容
exit : 程序提前结束  
seq：列数字（其中一个） 格式：1 2 10 （把1~10之间的数字列出来 有两个间隔 就是 1 3 5 7 9）
精确匹配： ^要找的文件 以 : 结尾

第二种：位置变量：$0 脚本文件名 $1~$9分别包含一到九个命令参数（更多的话赋值语句加上 { } ） $#包含命令参数的个数 $@包含所有命令参数（$* 他两个一样） $? 包含前一个命令的退出状态 $$正在进行的ID

第三种: 环境变量：export显示常见的环境变量 都是英文 难搞 还有 env 也是一个效果

Shell程序和语句：  默认换行   如果不换行的话首行#！/bin/bash 在输出的时候 echo -n不换行，还有一个是\c 但是要把首行换成#!/bin/sh
1、说明性语句：以 # 号开始本行 后面的不执行 C语言中的 //
2、功能性语句：	 read 输入（C语言scanf类似）可以同时输入多个变量 例如：read a1 a2 a3
		expr 算术运算命令（有加减乘除 %  乘\*是通配符要加\转义）运算符两边要加上空格（算数运算要有空格=不能有）不然直接报错哦，可以直接输出结果不给变量， 例如：expr 3 + 5 \* 4（\*转义，是*） 直接输出就可以得到结果23，如果要是给变量就要：A=`expr 3 + 5 \* 4`   要用上命令置换了（算数运算要有空格=不能有）里面可以加变量运算和数字替换一下就行了
		test 测试语句 测试结果 $?  0是真 1是假，命令错误是2（用echo $?打印）  1、测试一个字符串的值是否相等 例如：text "$answer"="yes" 测试是否相等（不等是 != 、-z 变量名 是测试是否为0  -n 是测试是否不为0） 2、测试整数 例如 test $num -eq 18 测试变量是否为18（两个变量中间是 -q 是否相等 -ne 不相等 -gt前大于后 -ge前大于等于后 -lt 前小于后 -le 前小于等于后）
			 3、测试文件属性 例如: test -d tmp  测试tmp是否为一个目录名（-e 文件是否存在 -f是否为普通文件 -L是否符号链接  -r 是否存在切可读 -w 存在切可写 -x存在切可执行 -s存在切长度不为0， a  -nt  b 文件a是否比文件b更新，a -ot  b文件a比文件b更旧 ）文件名也可以换成绝对路径文件名，也可以判断环境变量
3、结构性语句：测试语句 分支 循环 循环控制 C语言中 自性领悟把
1)条件语句：
	if [表达式]  then 语句1 else 语句2  fi（结尾）（表达式为真执行语句1，假执行语句2,）else里面可以嵌套一个 if 语句 记得fi结尾，也可以和C一样不过这个是 elif 表达式 then 打印的东西，不是else if 表达式 
2)分支语句:
	case(不用switch了) 字符串变量  in （记得换行） 模式1)（命令表）；；模式2)（命令表）；；*) (命令n);  ; esac结尾 字符串匹配到1就执行命令表1（可以在模式里面输入多个来匹配用  |  隔开 ），是2就执行2，(这两个；；相当于break)，     *)相当于default  *)后面可以不加 ；；也可以加
3)循环语句：
	for 循环  变量名  in  单词表   （\n） do  命令表   done(结尾)  循环的次数有单词表决定，循环一次单词表就赋1个值给变量名，直到没有。单词表也可以是文件夹、目录，单词表也可以是 `seq 1 2 10`(上面查看seq用法)可以循环多次
	也可以   for( ( i=1;i<=10;i++) )   do  命令符 done(结尾) 循环10 次  如果要死循环 ( ( ; ; ) )不写内容  ctrl+c可以退出
	while循环 [命令表达式(判断循环的语句)]  （\n）do  命令表  done(结尾)  如果是死循环把命令表达式换成 true，ctrl+c可以退出
4)循环控制语句：
	break  n 	跳出n层个整个循环 ，不加 n 是直接跳出整个循环
	continue 马上转到最近循环的下一轮 ，加 n 则转到 n 层循环的下一轮

Shell函数： 没有类型，就只有一个函数名 1、例如：a( ) {  } 可以在函数里 (可以把接收的值执行命令赋值给定义的新变量 赋值加 ` ` 命令置换 )如: B=` grep"^$1:" `(要加命令置换, ^ : 上面有) 获取传进来的变量，在函数里进行什么命令要在后面加要执行的命令 在 ` 里面 。return B返回，传递值 函数名 $ 定义好的变量  打印接受 $?(是return返回的值) 如: C=$?
	2、也可以不用return 返回值，直接赋值的时候就可以接收，记得加  `  ` 命令置换包裹函数名 例如; b=`a $1 `   直接 b接收 调用传值传值 函数里也不用return了
函数变量作用域： 	1、全局变量： 和C语言不一样  默认就是全局变量
		2、局部变量：加 local 就变成局部变量了

vim编译器：






p84 C语言高级编程-1











   
