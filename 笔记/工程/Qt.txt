
		命名规范：类名 首字母大写 单词与单词之间 首字母大写
		函数、变量 首字母小写 
	快捷键：
		运行：ctrl+R
		编译：ctrl+B	 
		查找：ctrl+F
		帮助文档：F1 放在单词上面 摁 F1 会显示 还有左边那个帮助里面搜索
		字体缩放 ctrl+鼠标中键
		自动对齐：ctrl+i
		整行移动：ctrl+shift+上键（就上）（下就下）
		同名 .h .pp一样的切换： F4 
		函数定义和函数之间的切换 	F2
		注释：ctrl + ? /



将Qstring转成 char*的方式 ：
		去Qstring  对象.toUtf8().data()  这样就是char*了

在QT中打印信息 用的头文件是 <QDebug>   qDebug()<<"输入内容在下面框框显示"

在 主函数中

#include "mainwindow.h"  	//qt中类名和头文件一样 而且没有.h

#include <QApplication>	//应用程序的头文件

//程序入口 argc命令行变量数量 argv命令行变量数组
int main(int argc, char *argv[])
{
  	 //把argv数组和argc数量放进应用程序对象a在QT中有且仅有一个
 	 QApplication a(argc, argv); //应该程序类

  	 //MainWindow刚才自己建项目创建的来写一个他的对象w 窗口对象 
   	 MainWindow w;

   	 //窗口默认不会弹出的想弹出调用show成员
   	 w.show();
  
    	//a.exec()进入消息循环机制相当于("pause")
   	 return a.exec();
}
 Q_OBJECT  如果使用信号和槽就要添加这个宏


在 .pro中

QT       += core gui   		  QT包含的模块 别的模块需要包含直接加后面

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets   		大于4版本  包含 widget模块

DEFINES += QT_DEPRECATED_WARNINGS 



按钮：	
	QPushButton  	包含头文件    <QPushButton> 模块 QT += widgets
	这个是在类中 头文件里
	创建：	QPushButton *对象 = new QPushButton；   	创建了一个窗口按钮
	显示：		 对象-> show();    			窗口显示
	在主窗口显示：	 对象->setParent(this);   		2）QPushButton *对象2 = new QPushButton("文字"，this)；
	设置文字：	1）对象->setText("可以直接英文");	2）QPushButton *对象2 = new QPushButton("文字")；
	

重置窗口大小：this->resize(宽，高)；也可以重置按钮大小 this换成 对象

移动按钮: 因为两个按钮会重叠 覆盖掉第一个

	对象2->move(宽，高)

重置窗口标题：setWindowTitle("liu");  本身在类中 不用this也行

固定窗口大小：setFixedSize(400,600);  不可以自己调节了 固定到这个大小了


链接按钮： 关闭了 啥了 的操作 参2 决定  信号链接槽函数  也可以信号链接信号
	connect() 
		参1 :按钮   （信号发送者，发送的信号是点击按钮）
		参2：&对象：：发送的信号 clicked（关闭窗口）    pressed（摁下的这个瞬间）released(释放的一瞬间) toggled（状态值 开和关）	Qt帮助文档查
		参3： 信号的接受者 就是窗口  就是 this      参4 是lambda表达式的时候 这个this 就不用写了
		参4:  处理的槽函数  在QT帮助文档查 Slots（槽）看窗口所在的类查这个父类 colse()关闭  还有很多~~用的时候  &对象：：close     下文有Lambda表达式
	因为对象继承了 窗口的对象父类 所以 对象和 父类的对象是一样的那个都行 对象的功能多 
		
	
自定义信号：	  写在类中的 signals下面   然后还有一个类 写槽函数
		 
	在类中是一个函数 没有返回类型 返回类型是void   2、而且信号只需要声明不需要实现 3、可以有参数  4、可以重载

自定义槽函数：定义写在 类 的 public 下   写在全局也行 版本够就OK  返回值也是void  这个就需要 实现了 也可以有参数 可以重载 

触发自定义信号： emit 对象：：自定义信号函数  什么时候想触发信号 就什么时候定义这个函数 
 	
自定义链接按钮： connect  参2和 参4 有参数了 就要先用函数指针转换一下   
	&对象：：成员函数  有参数了 就要换成   void (类名：：对象2)(参数类型 =)&对象：：成员函数   然后填参数的时候就把 对象2填进去  
	 参2 和 参4 都是这样  函数承载记得触发自定义信号


断开信号和槽： 
		disconnect(); 想断开那个 就填那个 信号连接的按钮那4参数 
 
1、一个信号可以链接多个槽函数
2、多个信号可以链接同一个槽函数
3、信号和槽的参数必须 1  1 对应 ：函数有参数就都要有  要都一样
4、信号和槽的参数必须一 一 对应，参数个数可以不1 1 对应
	信号的参数个数 可以多于 槽函数的参数个数（反之不行） 但是类型必须11 对应

Qt4版本的 信号和槽的写法：  不推荐这个版本 因为有参数的时候 不一样检测不到 还是可以运行 功能不会实现
	connect(zt,SIGNAL(ele()),st,STOT(qingke()))  有参数就直接把参数写里面了
		信号写：SIGNAL下  槽写：SLOT下
		感觉这个方便 有参数也不用转换（重载不用转换写函数指针） 自己会提示写入
	

4.5  Lambda表达式：C++11中用于定义并创建匿名的当函数对象，以简化工作   如果在QT 运行不了 就在最上面.pro文件加上： CONFIG  += 11
	[ ] 是Lambda表达式的开始 必须存在 
		可以 空  可以 =  ||  &引用（值传递方式 就像拷贝一份数据，还有引用） 可以 this（函数体内可以使用Lambda所在类中的成员变量）
 [= ]()
     {
         Btn->setText("bbbb");
     };  这是函数声明 调用加上()

[= ]()
     {
         Btn->setText("bbbb");
     }();
不加()  里面的代码就跟没有一样

matable
当 [ ] 里面是值的 时候报错 在 [ ] mutable 加上 用于修改值传递的变量


返回值: 
	int a= []()->int { return 1000;}();

点击按钮改变 按钮的字:
	connect(btn,&QPushButton::clicked,this,[=](){ btn->setText("要改的文字")  })；  [=]用=才行&不可以 用了会崩溃
用Lambda表达式这按钮很棒 很好用 方便   


p17：
	菜单栏： 	头文件   <QmenuBar>	   
		菜单栏 只有一个
			menuBar()系统创建好的，返回的是一个 QmenuBar  实例：QMenuBar *bar =menuBar();  
				//将菜单放入窗口   this->setMenuBar(bar);  往里面放东西才会显示 
			创建菜单栏：	addMenu(" ");

		创建文件：QMenu *wenjain=bar-> addMenu("文件")；  
   		创建编辑：QMenu *bianji=bar-> addMenu("编辑")；

			创建菜单项：       addAction()
				因为在文件下创建的 
		创建新建	QAction *xinjian=wenjian->addAction("新建");
		创建打开 QAction *dakai= wenjian->addAction("打开");
	
			添加分割线： addSeparator();
		在文件里 添加 wenjian->addseparator();

	工具栏： 可以有多个的  头文件 <QToolBar>
		实例：QToolBar *gongj = new QToolBar(this); 就放进窗口里了  
			 可以拖动 移动工具栏 菜单栏不行
	
		默认停靠范围：addToolBar(gongj);   这个是默认可以拖动   还有很多去帮助文档查这个函数  
			addToolBar(Qt::LeftToolBarArea,gongj);  这个是默认在左侧 
		
		只允许在左右停靠： setAllowedAreas()	
			gongj->setAllowedAreas(Qt::RightToolBarArea | Qt::LeftToolBarArea); 左边右边 用 | 
		
		设置浮动：  默认浮动  setFloatable(bool类型)
			gongj->setFloatable(false);  这样就不浮动了
		
		设置移动：setMovable(bool类型)
			gongj->setMovable(false);  就不可以拖拽了 不能移动了 上面花里胡哨的没用了

		工具栏上添加菜单项:addAction(创建的菜单返回的对象) 
			 gongj->addAction(xinjian); 也可以自己设置想要加上去的 该()里的参数

		添加分割线： addSeparator();  对象->直接调用 和菜单一样

p18
	状态栏： 头文件<QStatusBar>
			创建 实例：QStatusBar *zhuangtai =statusBar();
			放到窗口上：setStatusBar(zhuangtai);
		显示提示信息：   addWidget    创建好以后	
			左侧：	zhuangtai->addWidget(tishi);  () 里是提示信息创建的对象
			右侧：	 zhuangtai->addPermanentWidget(tishi2);() 里是提示信息创建的对象

	提示信息： 头文件<QLabel>
		QLabel *duixiang = new QLabel("提示信息",this)；

	铆接部件（浮动的窗口） 可以有多个     他是围着核心部件走的
		头文件：<QDockWidget>
			创建： QDockWidget *fudong= new QDockWidget;
		默认浮动位置： addDockWidget()         
			addDockWidget(Qt::LeftDockWidgetArea,fudong);  参数去帮助查  和上面工具栏一样

		设置停靠范围：和工具栏一样 只允许停靠的那个 setAllowedAreas
		
	核心部件： 只能有一个

		把文本编辑框变成核心部件： setCentralWidget  ()是文本框对象 也可以设置别的
			setCentralWidget(wenben);
		

	文本编辑框（类似记事本）
		头文件 <QTextEdit> 
 			实例：QTextEdit *wenben = new QTextEdit;

只能设置一个开头是set 多个是add 可以参考下记着

p19
	源文件
		可以通过ui找到->控件
	设置图片图标：  setIcon(QIcon("路径\用/"))
			实例：ui->wenjiann->setIcon(QIcon("C:/Users/86183/Pictures/@WQ)Q2JW6I}A`@ASYJ~{QLL.png")); wenjiann是在ui里改的菜单栏名字

	添加源文件：
		文件右键 ： Add New  然后选择qt -》Qt Resource File  然后名字下一步就完事了  记得要把添加的文件移动到代码文件同文件夹下哦
			就添加了一个文件 想要进去 右键 选择 Open in Editor

	使用资源文件：
		" : + 前缀名  + 文件名"


p20
	对话框： 点击弹出会话框 分为2中 模态和非模态 弹出不影响别的操作（可以操作）就是非模态   不可以对其他操作就是就是模态
		头文件：<QDialog>
		点击弹出会话框	connect() 的参2 &QAction::triggered 一点击就会触发
		
		创建一个对象 QDialog dlg(this)； 也可以省略

		模态：exec()  以模态形式启动对话框
			dlg.exec()   跟主函数的exec()一样 进入消息循环 阻塞

		
		非模态：show()   这个创建栈不行要创建堆对象  QDialog *dlg2=new QDialog(this);  加上就不用自己释放了
			dlg2->show()    用栈对象会一闪而过 这个就OK了

		设置属性：  setAttribute   参数有好多 去帮助查吧
			dlg2->setAttribute(Qt::WA_DeleteOnClose); 这个是点击关闭非模态就直接释放 没有他就把程序关了才释放

p21
	标准对话框 	头文件<QMessageBox>

		点击就是 错误：QMessageBox::critical(this,"标题","内容");  还有的别成员函数 帮助文档吧   
		点击就是 信息： QMessageBox::information(this,"标题","内容");	后面还有参数 设置样式	
		点击就是 问题：QMessageBox::question(this,"标题","内容");  这个点开 一个是YES  一个是NO
		点击就是 警告: QMessageBox::warning(this,"标题","内容");
			以上参数参数 :1、父亲2、标题3、提示内容4按键类型5关联回车按键
		返回值 可以直接if判断 参4返回的是哪个按键 用按键==这个函数 正确就是返回点击的是这个按键

p22
	颜色对话框和文本对话框：  	
		颜色：头文件<QColorDialog>
			QColorDialog::getColor(QColor(255,0,0)); QColor（里面是Rgb参数）  帮助文档查 还有很多介绍和参数  
				打开就是一个调色板 打开默认参数就是QColor设置的参数
			返回值：可以选好颜色参数 点ok可以返回颜色 用 QColor 对象 接收到  可以对象.red() 得出红色属性分量值
	
		文件： 头文件<QFileDialog>
			QFileDialog::getOpenFileName(this,"标题","路径D:/桌面","(*.txt *.jpg)"); 打开路径的什么格式文件 多个用空格隔开
			返回值： 可以QString 对象接收一下 可以得到打开的文件名
			

p24 直接跳转
	
	常用控件：
		Buttons：  
			Push Button： 添加按钮 直接可以修改内容  右边~ icon 设置图标（需要在项目中添加资源） 点击那个下拉小箭头一行的  选择资源文件 就OK了 下面大小什么 可以改参数 
			Tool Button:工具按钮  多用于显示图片    如果显示文字 写在 text 后边文字 然后在 toolButtonStyle 设置 ToolButtonTextOnly 风格 下面那个是图文并茂 
				下面 atuoRasize 勾选就是透明了 
			Radio Button 单选按钮 （男 女 这种的）可以用到下面的  Group Box 分组吧他们分一组可以就同时选中了
				打开默认选中要用代码了  ui->名字->setChecked(true); 就默认选中了

		Containers：
			Group Box： 分组布局啥的 把性别什么的分组













				
			





 
