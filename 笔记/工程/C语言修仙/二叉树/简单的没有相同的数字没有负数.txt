#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
	int data;
	struct node* left;
	struct node* right;
}Node;
typedef struct
{
	Node *root; //新建一个结构体树
}Tree;

void insert(Tree* tree, int value) //插入
{
	Node* node = malloc(sizeof(Node));  //新建一个节点
	node->data = value;  //赋值
	node->left = NULL;  //初始化
	node->right = NULL; //初始化

	if (tree->root == NULL)
	{
		tree->root = node;  //如果树是空的，新插入的就是跟
	}
	else
	{
		Node* temp = tree->root;  //临时节点等于树根
		while (temp != NULL)  //只要树根不为空
		{
			if (value < temp->data) //如果value没有data大就往做边去
			{
				if (temp->left == NULL) {//如果左边是空就直接放上去
					temp->left = node;  //因为value已经打包成功了
					return;
				}
				else { 
					temp = temp->left;//如果不是空的就继续循环探索
				}
			}
			else
			{
				if (temp->right == NULL) {
					temp->right = node;//如果右边是空的就直接放右边
					return;
				}
				else
				{
					temp = temp->right;//如果不为空就继续循环探索
				}
			}
		}
	}
}

void preorder(Node* node) //先序遍历  根 左 右，先根再左 再右
{
	if (node != NULL) {  //不是空根时
		printf("%d\n", node->data); //打印根  
		preorder(node->left); //递归进入左，如果不是空根先打印根再进左 
		preorder(node->right);//递归进入右，如果不是空根递归到上个的里面左和根已经打印了就该他了
	}
}
void inorder(Node* node) {  //中序遍历   左 根 右 ，先左走到底，输出左再根再右
	if (node != NULL) {
		inorder(node->left);//同上就是顺序不同
		printf("%d\n", node->data);
		inorder(node->right);
	}
}
void postorder(Node* node){  //后序遍历   左 右 根 先左走到底，再右再根
	if (node != NULL) {
		postorder(node->left);//同上就是顺序不同
		postorder(node->right);
		printf("%d\n", node->data);
	}
}
//查看树的层数
int get_height(Node* node) {
	if (node == NULL) { //为空返回0
		return 0;
	}
	else
	{
		int left_h = get_height(node->left); //新建一个整形接收，递归查看左边的层数
		int right_h = get_height(node->right);//新建一个整形接收，递归查看右边的层数
		int max = right_h;  //把右边的层数赋值给最大
		if (max < left_h) { //判断那个大
			max = left_h;  //如果左边大就给最大左边
		}
		return max + 1;  //返回最大加1 因为没有算  第一个直接算的左右
	}
}
//找出最大的值
int get_maimum(Node* node) {
	if (node == NULL) {
		return -1; //没有节点
	}
	else
	{
		int m1 = get_maimum(node->left); //递归 找出左边的最大值
		int m2 = get_maimum(node->right); //找出右边的最大值
		int m3 = node->data;  //头的值
		int max = m1;
		if (m2 > max) { max = m2; } 
		if (m3 > max) { max = m3; }
		return max;//比较谁的值大返回谁
	}
}
int main(void)
{
	int arr[7] = { 6,3,8,2,5,1,7 };
	Tree tree;   //新建一个树
	tree.root = NULL;   //初始化树
	
	int i;
	for (i = 0; i < 7; i++) {
		insert(&tree, arr[i]); //插入树
	}

	preorder(tree.root);  //传入函数 先序遍历树
	putchar('\n');
	inorder(tree.root);//中序遍历
	putchar('\n');
	postorder(tree.root); //后续遍历
	putchar('\n');
	int h = get_height(tree.root);  //求树的高度，h接收
	printf("%d\n", h);
	int m = get_maimum(tree.root);//从是跟找就是tree.root
	printf("%d\n", m);

	system("pause");
	return 0;
}