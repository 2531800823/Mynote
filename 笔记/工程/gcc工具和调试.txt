

编译的时候 gcc -o liu liu.c -D_LOCK_   就传递了一个  _LOCK_ 的宏定义 -D

 编译也可以	gcc liu.c  -o  liu  执行  ./liu
		gcc liu    执行是 ./a.out   他是什么文件都变成了  a.out
		gcc -o liu liu.c  执行 ./liu 

后缀：
	.c c语言	.i 已经过预处理的 c 程序	.h预处理文件头文件	.o 目标文件	.a/.so 编译后的库文件
命令语法：
	-c 只编译 -o 指定输出文件的名称 -v查看更详细的信息 -g 生成执行文件的时候加的调试信息  -O -O2 都是优化 O2比-O 更好过程慢点 -i(大写i )将文件加入到头文件目录中  -L 将目录加入到程序函数档案库文件的目录列表中

Gdb调试;
编译gcc 一定要加  -g
	 然后执行 gdb  a.out
	q  退出调试
查看文件	 	l( 小写L) 通过执行文件看源码，一次看10行 再  l 再十行   l 1  回到第一次按l的位置
设置断点	 	b 数字（设置第几行）
查看断点情况	info b  可以告诉你断点都在那里
断电删除		del 1 删除第一个断点  del 2 删除第2个断点
开始运行		r
查看电量的值	p 变量名
单步调试		n  和  s (可以进入到函数内部)
恢复程序运行	c  程序直接运行到下一个断点

对命令行传入参数	set args 值

p86C语言高级编程  3  










