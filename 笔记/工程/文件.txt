文件类型： 
	常规文件：r 
	目录文件：d
	字符设备文件：c
	块设备文件：b
	管道文件：p 
	套接字文件：s
	 符号链接文件：l


标准io：c库中定义好的输入输出中的一组函数

流：文本流和二进制流

windows：二进制流   换行符  \n
	文本流是  \r \n

linux: 每一个 换行都是  \n

全缓冲：当流的缓冲区无数据或物空间时财智星实际i/o操作 
行缓冲：当在输入和输出中遇到换行符 \n时。进行i/o操作
	当流和一个终端关联时，典型的行缓冲 
无缓冲：数据直接写入文件，流不进行缓冲

打开文件方式： 这是Windows的，Linux不区分二进制文件
"r"            打开文字文件只读          
"w"           创建文字文件只写         
"a"           增补, 如果文件不存在则创建一个     
"r+"          打开一个文字文件读/写        
"w+"         创建一个文字文件读/写          
"a+"         打开或创建一个文件增补          
"b"           二进制文件(可以和上面每一项合用)          
"t"           文这文件(默认项)  

“rt”　　　　　　只读打开一个文本文件，只允许读数据 
“wt”　　　　　　只写打开或建立一个文本文件，只允许写数据
“at”　　　　　　追加打开一个文本文件，并在文件末尾写数据
“rb”　　　　　　只读打开一个二进制文件，只允许读数据
“wb”　　　　 　 只写打开或建立一个二进制文件，只允许写数据
“ab” 　　　　 　追加打开一个二进制文件，并在文件末尾写数据
“rt+”　　　　　 读写打开一个文本文件，允许读和写
“wt+”　　　　　 读写打开或建立一个文本文件，允许读写
“at+”　　　　　 读写打开一个文本文件，允许读，或在文件末追加数 据
“rb+”　　　　　 读写打开一个二进制文件，允许读和写 
“wb+”　　　　　 读写打开或建立一个二进制文件，允许读和写
“ab+” 　　　　　读写打开一个二进制文件，允许读，或在文件末追加数据
打开流： 打开的限制是1024个
	FILE *fopen(const char*path,)两个个参数是字符串（1确定文件要打开的路径）2流的打开方式。成功返回流指针，失败返回NULL
现申请一个FILE的指针，然后if 指针=fopen的返回值，等于0就证明没打开

关闭流：fclose(FILE*) 之前打开定义的指针名。成功0，失败EOF。当程序终止时，打开的流会自动关闭

读写一个字符：fgetc()  fputc ()。fgetc(流指针)和getc(流指针)是等价的  
	可以定义一个int a；然后a=fgetc(stdin) 然后读入数据到a，输出就是比他多一个参数 ('a',stdot)
读写一行： fgets()  fputs()
读写若干个对象：fread()  fwrite   每次读写若干个对象，而每个对象具有相同的长度


	打开文件：FILE *fp=fopen("文件路径绝对相对","打开方式")     #define _CRT_SECURE_NO_WARNINGS  加上这个宏定义
	fopen_s(二级指针&fp（记得初始化），"路径"，"打开方式 ")
	
	文件操作：
	写：1）fwrite(&变量，2,3，fp)参数1：写入文件的地址（可以是字符串、数组、结构体）。参数2和参数3相乘等于字节数（一般参数2是size(类型)，参数3是几个类型的数据）。参数4文件指针
		如：char* str="hello"  fwrite(str，sizoof(char)，strlen(str)+1，fp)  第三个参数是字符串的大小个数，+1是加上'/0'写入后 后面也有一个空格就是'\0'不+1就没有这个空格，
	读：1）fread()  记住打开的时候用 W 会自动擦除，参数1和fwrite一样（哪个是写入的，这个是读出来放的）,2，3是相乘字节（别比写入的大）参数4是文件指针，
		返回值：返回读到的字节个数。超过了本有的字节 就返回读到的多少。错的会返回小于0的数 用循环读：判断是读没有了返回0	 		
	判读文件是否结尾：feof(fp)  参数是文件指针，可以放在循环里面来判断 for(feof(fp))  不等于0就一直循环，等到0就结束了，没有到末尾就是返回0，到了末尾就是1
	
	读写结构体：用fwrite(&结构体名，sizeof(结构体名)，1（一个结构体），fp（文件指针）) 写入一个结构体，读：fread(参数和写入一样)  东西看着是乱码，但是读的时候还是写入的
	
	写：2）fputs()参数1是输入的字符，参数2是文件指针。返回值成功返回0 失败返回 EOF（-1）调用两个不会自动换行（上面 fwrite会）可以打印参数的时候加上换行	
	读：2）fgets()从文件中读取一行，参数1读出来的数据装哪里，参数2 最大读取量（不要超过参数1的长度）参数3 文件指针。多次调用会自己换行，但是fputs 不会还要自己写 
	

	写：3）fprintf(fp,"%d，%s，%.2lf\n",12,"hello",13.14)参数1 文件指针,后面的就是这个形式，可以跟printf输出的形式一样写进去（运行效率低）
	读：3）fscanf(fp,"%d，%s，%f\n",&a,b,&c读的时候就别.2什么了)int a；double c；char b[10]；跟正常的一样加&（要严格按照写的格式读要一模一样）字符串的要用空格前面是，

	其他函数操作：
	设置文件指针的位置	fseek(fp，5L， SEEK_END 0L) 参数1 文件指针，参数2设置文件所指的位置 long型的（记得要有L后缀）参数3 是一个系统定义好的宏 SEEK_SET （参数2是0L指向头是2L就指向第2个字节）
		 SEEK_END 0L设置文件指向结尾 -10L结尾向前10个字节，SEEK_CUR 10L设置文件 在当前位置向右挪动10个 是负数就向左
		
		void rewind(fp)定义到起始位置，也可以用上面那个来实现
		ftell(fp)：返回指针当前的位置 ,返回类型是long类型（返回的是下标）。参数是文件指针。可以用上面那个(fseek)指向结尾然后用这个查看文件有多少个字节哦

	刷新：fflush(fp) 参数是文件指针 指定刷新哪一个文件，对文件操作好没有关闭之前的操作就停留在缓冲区里，用这么可以刷新保存
	
	检查是否出错：int ferror(fp) 出错返回1  没有出错返回0
			

	关闭文件：int fclose( ) 关闭加保存

文件I/O:  Linux遵循的是这个posix，是无缓冲的（上面是标准的是c库中的，他是带缓冲的），Linux中文件I/O更底层，
	posix（可移植操作系统接口）定义的一组函数，无缓冲机制，每次操作都引起系统调用
	文件符：fd （标准的是FILE）文件描述符从0开始分配（是非负整数）

头文件：	<fcntl.h>
	open()打开一个文件，参数1 打开文件的路径，参数2打开放式（可以用 | 来使用多个方式），新建文件用，第三个参数指定文件的权限（设备文件只可以用open打开，不可以用open创建，要专门的） 
		O_RDONLY:只读打开，
		O_WRCNLY:可写打开文件
		O_RDWR:读写打开文件，
		O_EXCL：如果文件存在！！！时返回消息错误（可以测文件是否存在）
		O_CREAT：如果文件不存在就创建一个新的，用参数3为其设置权限
		O_NOCTTY：使用本参数时（文件为终端，那么终端不可以作为强调open()系统调用的那个进程的控制终端）
		O_TRUNC：如文件已存在，先删除文件原有数据
		O_APPEND:以添加方式打开，所以对文件写的操作都在文件末尾
	参数3：被打开文件的存取权限，为8进制表示法 （一般都是0666）~~不知道呢

	read：读取数据 头文件<unistd.h>  ssize_f(整形)  read(int fd,void *buf,size_t count) 返回值是实际读取的字节数，出错返回EOF，到末尾返回0。buf是接收数据的缓冲区保存读到的内容（需要先定义好）
		fd用来保存文件描述符，count 要读取的字节数
	write：写入数据 头文件<unistd.h>  ssize_f(整形)  write(int fd,void *buf,size_t count) buf先写好要写入的内容，别的都和上面一样
	
	lseek：函数定位，头文件<unistd.h>标准也有 是ftell返回指针位置


	close文件关闭 头文件<unistd.h>     int close(int fd文件描述符)成功返回0，失败返回EOF
	
访问目录：头文件<dirent.h>
	opendir：打开一个目录文件：头文件<dirent.h>  DIR *opendir(文件路径) DIR是结构体类型，成功返回目录流（结构体）指针，失败返回空

	readdir：访问目录 struct dirent* readdir(DIR* dirp)参数是上面打开目录的指针， 返回值是结构体，叫目录项。成功返回目录流dirp中下一个目录项，出错返回NULL
		dp=readdir(dirp)  读取成功然后就可以打印了，printf("%s\n",dp->d_name)

	closedir：关闭一个目录文件，int closedir(DIR *dirp)
文件4-1